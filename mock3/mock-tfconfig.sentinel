import "strings"
import "types"

_modules = {
	"root": {
		"data":    {},
		"modules": {},
		"outputs": {},
		"providers": {
			"google": {
				"alias": {
					"": {
						"config": {
							"project": "airline1-sabre-wolverine",
						},
						"references": {
							"project": [],
						},
						"version": "",
					},
				},
				"config": {
					"project": "airline1-sabre-wolverine",
				},
				"references": {
					"project": [],
				},
				"version": "",
			},
		},
		"resources": {
			"google_container_cluster": {
				"primary": {
					"config": {
						"initial_node_count": 3,
						"ip_allocation_policy": [
							{},
						],
						"location": "us-central1-a",
						"name":     "marcellus-wallace",
						"node_config": [
							{
								"labels": {
									"foo": "bar",
								},
								"oauth_scopes": [
									"https://www.googleapis.com/auth/cloud-platform",
								],
								"tags": [
									"foo",
									"bar",
								],
							},
						],
						"timeouts": null,
					},
					"provisioners": null,
					"references": {
						"initial_node_count": [],
						"ip_allocation_policy": [
							{},
						],
						"location": [],
						"name":     [],
						"node_config": [
							{
								"labels":       [],
								"oauth_scopes": [],
								"tags":         [],
							},
						],
						"timeouts": [],
					},
				},
			},
		},
		"variables": {},
	},
}

module_paths = [
	[],
]

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
modules = _modules.root.modules
providers = _modules.root.providers
resources = _modules.root.resources
variables = _modules.root.variables
outputs = _modules.root.outputs
